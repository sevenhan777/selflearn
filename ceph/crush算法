Crush 算法要解决的三个问题
	• 1.数据如何分布与负载均衡？
	• 2.应对集群的伸缩，数据在均衡
	• 3.大规模集群，数据均衡算法效率要高
https://ivanzz1001.github.io/records/post/ceph/2019/01/05/ceph-src-code-part4

Crush map 定义了 id 从bucket中找item 的算法
	item osd.1 weight 1.000          //item1: osd.1和权重
item osd.2 weight 1.000
item osd.3 weight 1.000
	}


Crush rule
rule replicated_ruleset {
	ruleset 0                          //ruleset的编号id
	type replicated                    //类型replicated或者erasure code	
	min_size 1                         //副本数最小值
	max_size 10                        //副本数最大值
	
	step take root                     //选择一个root bucket，做下一步的输入
	step choose firstn 1 type row      //选择一个row，同一排
	step choose firstn 3 type cabinet  //选择三个cabinet，三副本分别在不同的cabinet
	step choose firstn 1 type osd      //在上一步输出的3个cabinet中，分别选择一个OSD
	step emit
}

Straw 算法：从每个bucket 中找子bucket 或者device
伪随机：输入一样 输出一样 
这里介绍最常用的straw算法：
static int bucket_straw_choose(struct crush_bucket_straw *bucket,
			       int x, int r);
函数bucket_straw_choose用于straw类型的bucket的选择，输入参数x为pgid，r为副本数，其具体实现如下：
1） 对每个item，计算hash值
draw = crush_hash32_3(bucket->h.hash, x, bucket->h.items[i], r);
2）获取低16位，并乘以权重相关的修正值
draw &= 0xffff;
draw *= bucket->straws[i];

但是 x r bucket 改变则输出改变

import random
random.seed(1234)
print(random.randint(0, 100))

只要seed 一样结果就一样，seed 不同结果不同，seed 就相当于x r bucket 


https://zhuanlan.zhihu.com/p/58888246
根据 crush map 记录ceph 集群物理拓扑结构， 根据crush rule 映射 pg<->osd
核心算法：
def choose_firstn(take, num_reps, failure_domain, chooseleaf, pgid):
    result, osd_result = empty_list
    for rep in range(num_reps):
        in_bucket = take  # start item
        trial = rep
        while trial < MAX_TRIES + rep:
            item = bucket_choose(in_bucket, pgid, trial)                  //pgid 对于同一个数据是不变的，因此需要调整bucket id 和重试次数这两个参数，来应对选到不合适osd的情况
            if item.type != failure_domain:  # go deeper
                in_bucket = item
                continue
            if item in result:  # collide, pick again
                trial += 1
                continue
            if failure_domain == OSD:
                if is_out(item):  # check reweight value of item(OSD)      //过载测试 手动调整reweight reweight越大越容易被选中
                    trial += 1
                    continue
            elif chooseleaf:
                osd = choose_firstn(item, 1, OSD, False, pgid)
                if osd:  # OK, found a valid osd
                    result.append(item)
                    osd_result.extend(osd)
                    break
                else:  # failed to find an available osd
                    trial += 1
                    continue
            else:
                result.append(item)  # OK, found a valid one
                break
                
    if chooseleaf:
        result = osd_result
    return result
根据 crush rule 找到故障域，再从故障域设备（如host）递归向下找OSD， 找是核心即bucket_choose
def bucket_choose(in_bucket, pgid, trial):
2        for index, item in enumerate(in_bucket.children):
3            draw = crush_hash(item.id, pgid, trial)
4            draw *= item.weight
5            if index == 0 or draw > high_draw:
6                high_item = item
7                high_draw = draw
8        return high_item
其中crush_hash可以简单地看成是一个伪随机的hash函数：它接收3个整数作入参，返回一个固定范围内的随机值。同样的输入下其返回值是确定的，
但是任何一个参数的改变都会导致其返回值发生变化。Weight是每个item的权重值（对于OSD来说，weight值与硬盘容量成正比；
bucket的weight值即其下children weight值的总和），显然line 4可以使得weight值大的item被选中的几率升高。bucket_choose函数有以下几个特点：
1. 对于确定的bucket，不同的pgid能返回不同的结果
2. 对于确定的bucket和pgid，调整trial值可以获得不同的结果
3. 对于确定的pgid和trial值，如果bucket内item增加或删除或调整weight，返回结果要么不变，要么就变更到这个发生变化的item上


Straw 和straw2的区别
当然straw也存在问题
	• Straw算法将所有元素按权重逆序排列后逐个计算每个元素的Item_straw，会导致最终选择结果不断取决于每个元素自身权重还
与集合当助其他元素强相关。因而会引起不相干的数据迁移。因而Sage Weil进行修正：在计算straw长度时仅使用元素自身的权重。
从而得到straw改进算法straw2。
原Straw算法：
max_x = -1
max_item = -1
for each item:
	x = hash(input,r)
	x = x*item_straw                                                            //straw 使用item straw 来表示权重 item_straw受其他item(osd)的权重变化影响
	if x > max_x:
		max_x = x
		max_item = item
return max_itemCopy
Straw2算法：
max_x = -1
max_item = -1
for each item:
	x = hash(input,r)
	x = ln(x/65536)/weight                                          //只和自身权重相关
	if x > max_x:
		max_x = x
		max_item = item
return max_itemCopy
上述逻辑中，针对输入input和随机因子r执行哈希后，结果落在[0,65536]之间，x/65536必然小于1，取其自然对数ln(x/65536)后结果为负值，将其除以自身权重后，表现为权重越大，x越大，从而体现了我们所期望的每个元素对于抽签结果的正反馈作用。
