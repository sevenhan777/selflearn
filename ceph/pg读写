什么是pg
pg的数据读写流程
一个pg的多副本一致性问题
pg如何在osd间迁移，进而实现数据恢复和数据平衡

=======================================================================================================================================================
概念：
peering:
当集群发生变动（如新增/下线 OSD、重启、网络分区等），PG 中的数据副本可能分布在不同 OSD 上。这时候 Ceph 需要重新协调这些副本，
以找出哪一个副本是最新的、哪些副本需要同步，这一过程就叫 Peering（对等协商）

osd map:
OSD Map 是一个由 Monitor 维护的、描述集群拓扑和 OSD 状态的映射表，包含了所有 OSD 的健康状态、PG 到 OSD 的映射规则等关键信息。

✅ OSD Map 包含哪些信息？
信息项	说明
所有 OSD 的 ID 和状态	包括每个 OSD 是否 up/down，in/out
CRUSH 映射	用于数据分布的规则（包括权重等）
PG 到 OSD 的映射	每个 PG 应该由哪些 OSD 存储副本
版本号（epoch）	每次变动都加一，确保有序更新
Pool 信息	包括 Pool 数量、PG 数量、副本数等
历史事件（如 OSD 添加）	帮助恢复时回溯状态变化

✅ 它是干嘛用的？
客户端基于 OSD Map + CRUSH 算法可以定位对象在哪个 OSD 上（无须中心路由）；

OSD 之间通过它协调 PG 所属、副本副本一致性等；

用于 PG peering、数据恢复、迁移等重要流程；

保证集群一致性和故障恢复的关键。

✅ 举个简单例子：
假设你有：

4 个 OSD：ID 为 0~3；

有一个 Pool 设置为 64 个 PG，每个 PG 保持 2 个副本；

OSD Map 会告诉你：

OSD.2 当前是 down 状态；

PG 3 的副本在 OSD.0 和 OSD.2；

PG 3 需要恢复一个副本到 OSD.1，因为 OSD.2 down；

OSD.1 目前 in，且有足够空间；

客户端查询对象 hash 为 PG 3，根据 OSD Map 得知应联系 OSD.0 读取。

