ext2 ext3 ext4 之间的区别
1. ext3 增加了日志
2. 目录文件 ext4 使用了htree
3. ext4 使用了延迟分配
4. ext4 使用块范围表示extent
5. fsck

增加日志的作用
1.预写日志，先写日志，再写磁盘，数据写入成功后即可返回请求
2. 系统崩溃，那么下次挂在文件系统时会根据journal 回放日志，从而恢复未完成的操作
3. 三种日志级别
 模式名	描述	优点	缺点
journal 模式	数据和元数据都写入日志，再写入主区域	数据最安全	写入两次，性能低
ordered 模式（默认）	元数据写日志，数据先写主区域，再写日志	较高性能，保证数据顺序	崩溃时可能丢失数据但不会损坏文件系统
writeback 模式	只有元数据写入日志，数据异步写入主区域	最高性能	最危险，可能导致旧数据出现在新文件中
ordered 和 writeback 的区别在于数据写入磁盘的时机，order 元数据写入日之前 writeback 元数据写入日志后

ext4 extent htree 延迟分配（delayed allocation）
非 extent（ext3）：需要记录 100 条记录（每个块号）；
使用 extent（ext4）：只需记录一条 extent：从第2000块起，共100个块。
ext2/ext3 目录结构是线性表，目录项越多查找越慢。
ext4 引入了类似 B-tree 的结构：Htree（Hashed B-tree）
ext3 写文件时，一开始就分配物理磁盘块。而 ext4 支持延迟到“写入数据落盘之前”再决定分配哪些块。
📌 为什么这么做？
系统可以在缓存里先积累更多数据；
一次性分配更大的连续块；
减少磁盘碎片，提高写入性能。

q:extent的方式来分配块，后期数据更改一个块怎么处理？
1. 直接修改原内容，要保证数据可靠引入日志记录
2. 分配新的extent,适用于文件新增内容，多个extent ext4 使用B+tree来管理
3. 修改原内容，但是原内容所在的块又不满足新内容的需求，拆分原extent,新内容写入新的extent.
q:htree 是怎么回事，怎么实现的索引
1.把文件名（目录项名）hash作为key；
2.然后根据哈希值定位到某个哈希段（也就是上面某个 range）；
3.每个 range 对应一个 block，这个 block 里存的是实际的目录项列表（比如多个文件名）
4.从这个block里在使用二分法查找文件的目录项（文件名->inode）
q: fsck 的工作原理
Pass 1：检查 inode、block、大小
检查所有 inode 是否有效；
每个 inode 指向的数据块是否存在；
检查 block 是否越界、重复引用、丢失； 比如文件系统只有10个blcok 但是inode里记录了11
记录使用了哪些 block。
📌 修复典型问题：
文件指向了无效 block；
block 被多个 inode 同时引用（block 重复）；
inode 信息与数据不匹配（比如大小不符）。
🔧 Pass 2：目录结构检查
遍历目录项；
检查目录项是否指向合法 inode；
文件名与 inode 是否一致。
🔧 Pass 3：目录连接性检查
检查所有 inode 是否可达（是否有路径指向它）；
检查孤儿文件（无路径连接的 inode）。
📌 如果找到孤儿 inode，可能会把它移动到 /lost+found。
🔧 Pass 4：引用计数检查
每个 inode 有一个 link count（引用次数）；
fsck 会检查这个计数是否正确，是否与实际目录项数量一致。
🔧 Pass 5：全局 block bitmap 检查
校验 block 和 inode 的位图是否和实际使用情况匹配；
修复标记错误或未标记的 block/inode。
💡 工作机制补充说明
fsck 主要工作在 文件系统的元数据层；
它并不会扫描整个磁盘的原始数据内容；
如果文件系统有日志（如 ext3/ext4 的 journal），fsck 会先重放 journal；
修复过程中会提示用户是否要修复，生产系统中常加 -y 参数自动修复。
fsck 修复的是文件系统结构，不是文件内容本身。如果文件结构损坏或丢失，它尝试将可访问的 inode 内容保存到 /lost+found 中，部分内容可能丢失、截断或不可识别。
对关键数据的恢复，应结合其他恢复工具使用。
元数据	描述	检查目的
Superblock	文件系统全局信息	参数合法、备份一致
Block Bitmap	数据块使用标记	是否与实际使用匹配
Inode Bitmap	inode 使用标记	是否与目录引用匹配
Inode Table	文件基本信息和数据块指针	内容合法、指针正常
Directory	目录项文件名 → inode 映射	指向合法 inode、结构正确
Data Blocks	文件实际内容	无越界、无重复、未泄漏
