✅ 一、基础匹配符号 + 示例
正则符号	含义	示例
.	任意字符（除换行）	re.findall(r".", "abc") → ['a', 'b', 'c']
^	开头	re.match(r"^abc", "abcdef") → ✅
$	结尾	re.search(r"def$", "abcdef") → ✅
*	0次或多次	re.findall(r"ab*", "abbb ac") → ['abbb', 'a']
+	1次或多次	re.findall(r"ab+", "abbb ac") → ['abbb']
?	0或1次	re.findall(r"ab?", "abbb ac") → ['ab', 'a']
{n}	恰好 n 次	re.findall(r"\d{3}", "123456") → ['123', '456']
{n,}	至少 n 次	re.findall(r"\d{2,}", "1234") → ['1234']
{n,m}	n 到 m 次	re.findall(r"\d{2,3}", "12345") → ['123', '45']
[]	字符集合	re.findall(r"[aeiou]", "hello") → ['e', 'o']
[^]	非集合字符	re.findall(r"[^aeiou]", "hello") → ['h', 'l', 'l']

✅ 二、快捷字符 + 示例
正则符号	含义	示例
\d	数字（[0-9]）	re.findall(r"\d+", "a123b") → ['123']
\D	非数字	re.findall(r"\D+", "a123b") → ['a', 'b']
\w	单词字符	re.findall(r"\w+", "a_123!") → ['a_123']
\W	非单词字符	re.findall(r"\W+", "a_123!") → ['!']
\s	空白字符	re.findall(r"\s", "a b\tc") → [' ', '\t']
\S	非空白	re.findall(r"\S", "a b") → ['a', 'b']
\b	单词边界	re.findall(r"\bhi\b", "hi there") → ['hi']

✅ 三、分组与或 | 示例
表达式	含义	示例
(abc)	捕获组	re.findall(r"(abc)", "abcabc") → ['abc', 'abc']
(?:abc)	非捕获组	不记录匹配内容，仅匹配逻辑
`a	b`	或

✅ 四、常用函数 + 示例
1. re.match()
python
Copy
Edit
import re
re.match(r"\d+", "123abc").group()  # '123'
2. re.search()
python
Copy
Edit
re.search(r"\d+", "abc456def").group()  # '456'
3. re.findall()
python
Copy
Edit
re.findall(r"[a-z]+", "abc123XYZ")  # ['abc']
4. re.sub()
python
Copy
Edit
re.sub(r"\d+", "***", "a12b34")  # 'a***b***'
5. re.finditer()
python
Copy
Edit
for m in re.finditer(r"\d+", "a12b34"):
    print(m.group())  # 12, 34
6. re.compile()
python
Copy
Edit
pattern = re.compile(r"\w+")
pattern.findall("abc 123")  # ['abc', '123']
✅ 五、贪婪 vs 非贪婪 + 示例
python
Copy
Edit
text = "<h1>Title</h1><h1>Sub</h1>"

# 贪婪匹配
re.findall(r"<h1>.*</h1>", text)  
# → ['<h1>Title</h1><h1>Sub</h1>']

# 非贪婪匹配
re.findall(r"<h1>.*?</h1>", text) 
# → ['<h1>Title</h1>', '<h1>Sub</h1>']
✅ 六、flags 示例（忽略大小写、多行等）
python
Copy
Edit
text = "Hello\nworld"

# 忽略大小写
re.findall(r"hello", text, flags=re.I)  # ['Hello']

# 多行匹配 ^ 和 $
re.findall(r"^w.*", text, flags=re.M)  # ['world']
✅ 七、应用案例整合
✔ 邮箱匹配
python
Copy
Edit
re.findall(r"\w+@\w+\.\w+", "Email me: a@b.com")  
# → ['a@b.com']
✔ 手机号
python
Copy
Edit
re.findall(r"1[3-9]\d{9}", "My phone: 13812345678")  
# → ['13812345678']
✔ HTML标签内容
python
Copy
Edit
re.findall(r"<title>(.*?)</title>", "<title>Home</title>")  
# → ['Home']

总体对比表
函数	作用	匹配范围	返回值类型	适用场景
re.match()	从字符串开头匹配	仅匹配开头	Match 对象 / None	检查字符串是否以某模式开头
re.search()	从任意位置查找第一个匹配	全文查找	Match 对象 / None	找到某模式是否存在
re.findall()	查找所有匹配项	全文查找	列表（只含字符串）	提取所有匹配值
re.sub()	替换所有匹配项	全文替换	字符串（替换后的结果）	文本清洗、脱敏等操作

✅ 详细例子说明
设有字符串：

python
Copy
Edit
text = "hello 123 world 456"
pattern = r"\d+"
1. re.match(pattern, string)
只能匹配开头，否则返回 None

python
Copy
Edit
import re

result = re.match(pattern, text)
print(result)  # None（因为 text 不以数字开头）

# 正确示例（数字开头）：
re.match(r"\d+", "123abc").group()
# → '123'
2. re.search(pattern, string)
查找第一个匹配项（全文范围）

python
Copy
Edit
result = re.search(pattern, text)
print(result.group())  
# → '123'（找到了第一个数字串）
3. re.findall(pattern, string)
返回所有匹配结果，以列表形式给出

python
Copy
Edit
matches = re.findall(pattern, text)
print(matches)
# → ['123', '456']
4. re.sub(pattern, repl, string)
将匹配项替换为指定内容

new_text = re.sub(pattern, "###", text)
print(new_text)
# → 'hello ### world ###'
import re
def double(match):
    num = int(match.group())
    return str(num * 2)
text = "Price: 10, Discount: 5"
result = re.sub(r"\d+", double, text)
print(result)
# → "Price: 20, Discount: 10"

import re
text = "Price: 10, Discount: 5"
result = re.sub(r"\d+", lambda m: str(int(m.group()) * 2), text)
print(result)
✅ 总结一句话理解
match()：开头必须匹配，像“门口查岗”；

search()：扫一遍，看是否存在匹配；

findall()：把所有符合条件的内容都抓出来；

sub()：把所有匹配的东西换掉（替换操作）。
》》》》》》》》》》》》》》》》》》》》》》》》》》》》》
一、什么是 group？
在正则表达式中，使用 () 可以把表达式的一部分括起来形成一个 捕获组（group）。
Python 中使用 .group() 方法可以提取这些组的内容。

🧠 二、group() 的基本用法
python
Copy
Edit
import re

text = "Name: Alice, Age: 25"
pattern = r"Name: (\w+), Age: (\d+)"

match = re.search(pattern, text)
print(match.group(0))  # 整体匹配 → Name: Alice, Age: 25
print(match.group(1))  # 第1组 → Alice
print(match.group(2))  # 第2组 → 25
✨ .group(n) 说明：
方法	含义
group(0)	返回整个匹配结果（默认）
group(1)	返回第1组的内容
group(2)	返回第2组的内容
...	多组继续向后类推

✅ 三、匹配多个组 + 提取多个结果
📌 示例：提取多个 (姓名, 电话) 组合

import re

text = "Tom: 13800001234, Jerry: 13912345678"
pattern = r"(\w+): (\d+)"

matches = re.findall(pattern, text)
print(matches)
# → [('Tom', '13800001234'), ('Jerry', '13912345678')]
