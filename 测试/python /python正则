一、什么是正则表达式？
正则表达式（Regular Expression, 简称 regex）是一种用来描述文本规则的语法，用于查找、匹配、替换、提取字符串中的特定内容。

在 Python 中，使用内置模块 re 来处理正则：

python
Copy
Edit
import re
📘 二、基础语法规则
符号	含义
.	匹配除换行符以外的任意字符
^	匹配字符串开头
$	匹配字符串结尾
*	匹配前一个字符 0 次或多次
+	匹配前一个字符 1 次或多次
?	匹配前一个字符 0 次或 1 次（非贪婪）
{n}	匹配前一个字符 n 次
{n,}	匹配前一个字符至少 n 次
{n,m}	匹配前一个字符 n 到 m 次
[...]	匹配括号内任意字符
[^...]	不匹配括号内的字符
\	转义字符，如 \d
`	`
(...)	分组，捕获子表达式
(?:...)	非捕获分组（不保存结果）

🔍 三、常用元字符（快捷写法）
表达式	含义
\d	匹配任意数字（等价于 [0-9]）
\D	匹配非数字
\w	匹配单词字符（字母数字下划线）
\W	匹配非单词字符
\s	匹配空白符（空格、换行、Tab）
\S	匹配非空白符
\b	匹配单词边界
\B	非单词边界

⚙️ 四、常用函数与用法
1. re.match(pattern, string)
从字符串起始位置匹配

python
Copy
Edit
re.match(r"\d+", "123abc")  # ✅ 匹配
re.match(r"\d+", "abc123")  # ❌ 不匹配
2. re.search(pattern, string)
搜索整个字符串，返回第一个匹配项

python
Copy
Edit
re.search(r"\d+", "abc123xyz")  # ✅ 匹配 123
3. re.findall(pattern, string)
返回所有匹配项的列表

python
Copy
Edit
re.findall(r"\d+", "a11b22c33")  # ['11', '22', '33']
4. re.finditer(pattern, string)
返回可迭代的匹配对象，每个是 re.Match 实例

python
Copy
Edit
for m in re.finditer(r"\d+", "a11b22"):
    print(m.group())  # 11, 22
5. re.sub(pattern, repl, string)
替换匹配内容

python
Copy
Edit
re.sub(r"\d+", "-", "a11b22c33")  # a-b-c-
6. 编译模式 re.compile()
提高效率，适用于重复使用同一规则的情况

python
Copy
Edit
pattern = re.compile(r"\w+")
pattern.findall("Hello 123")  # ['Hello', '123']
🎯 五、常用案例
邮箱匹配
python
Copy
Edit
re.match(r"\w+@\w+\.\w+", "test@example.com")
手机号匹配（以1开头、11位）
python
Copy
Edit
re.match(r"1[3-9]\d{9}", "13912345678")
提取 HTML 标签内容
python
Copy
Edit
re.findall(r"<h1>(.*?)</h1>", "<h1>Hello</h1><h1>World</h1>")
⚠️ 六、贪婪 vs 非贪婪匹配
类型	说明
贪婪	默认行为，尽可能多地匹配，例如 .*
非贪婪	在 *、+、? 后加 ?，尽可能少匹配，例如 .*?

python
Copy
Edit
re.findall(r"<h1>.*</h1>", "<h1>One</h1><h1>Two</h1>")   # 贪婪，结果 ['<h1>One</h1><h1>Two</h1>']
re.findall(r"<h1>.*?</h1>", "<h1>One</h1><h1>Two</h1>")  # 非贪婪，结果 ['<h1>One</h1>', '<h1>Two</h1>']
🧠 七、常用标志位（flags）
标志	含义
re.I	忽略大小写
re.M	多行模式（^ $ 匹配每行）
re.S	点号 . 匹配换行符
re.X	忽略空白（更易读写复杂模式）

python
Copy
Edit
re.findall(r"hello", "HELLO", flags=re.I)  # ['HELLO']
